// <auto-generated />
using System;
using ManutationItemsApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManutationItemsApp.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200525074846_manutation isPaused field added")]
    partial class manutationisPausedfieldadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<byte[]>("BarCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Characteristics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommissioningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsumptionSpeed")
                        .HasColumnType("int");

                    b.Property<int>("CountAtWarehouse")
                        .HasColumnType("int");

                    b.Property<bool>("Deterioration")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Function")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlingWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HourConterAtcommissioning")
                        .HasColumnType("int");

                    b.Property<int>("IntalledQuantity")
                        .HasColumnType("int");

                    b.Property<string>("InternalIdentificationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NFC")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptimalPurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReorderLevelLr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityLevelLs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WarrantyExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkingHoursCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetErrorCode", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("ErrorCodeId")
                        .HasColumnType("int");

                    b.HasKey("AssetId", "ErrorCodeId");

                    b.HasIndex("ErrorCodeId");

                    b.ToTable("AssetErrorCodes");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetFiles");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "AssetId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetsItems");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ButtonUI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ButtonUIs");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountAtWarehouse")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionItalian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptimalPurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("StockSL")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ConsumableTemp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("ConsumableTemps");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ErrorCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotToDisplay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ErrorCodes");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumableId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableId");

                    b.HasIndex("ConsumableId1");

                    b.HasIndex("ToolId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BarCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Characteristics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommissioningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsumptionSpeed")
                        .HasColumnType("int");

                    b.Property<int>("CountAtWarehouse")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionItalian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deterioration")
                        .HasColumnType("bit");

                    b.Property<string>("HandlingWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntalledQuantity")
                        .HasColumnType("int");

                    b.Property<string>("InternalIdentificationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsReparaible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelFMECA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NFC")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptimalPurchaseQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReorderLevelLr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityLevelLs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplyTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WarrantyExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ItemFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemFiles");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ItemTemp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("ItemTemps");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Manutation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("BaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOutNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ErrorCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("Historical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCartolinaRossa")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFailure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("bit");

                    b.Property<int?>("ManutationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("NeedToAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("NotToDiplay")
                        .HasColumnType("bit");

                    b.Property<string>("PauseReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOfFaultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ErrorCodeId");

                    b.HasIndex("ManutationTypeId");

                    b.HasIndex("TypeOfFaultId");

                    b.ToTable("Manutations");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ManutationStage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManutationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManutationId");

                    b.ToTable("ManutationStages");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ManutationTypess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ManutationTypes");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.MeasuringTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasuringTools");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.MeasuringToolTemp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("MeasuringToolTemps");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.PauseReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PauseReasons");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovTemp")
                        .HasColumnType("int");

                    b.Property<string>("CommercialRefferent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTechn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneTechn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalRefferent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ToolTemp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("ToolTemps");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.TypeOfFault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("typeOfFaults");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.UserManutationStage", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManutationStageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationUserId", "ManutationStageId");

                    b.HasIndex("ManutationStageId");

                    b.ToTable("UserManutationStages");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.UserRolesRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAsset")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAttrezzature")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAudit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAutoAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCalendar")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConsultateActive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConsultateHistorical")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDoActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDoNewRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("CanFornitori")
                        .HasColumnType("bit");

                    b.Property<bool>("CanItem")
                        .HasColumnType("bit");

                    b.Property<bool>("CanKpi")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("CanMasterActionPlan")
                        .HasColumnType("bit");

                    b.Property<bool>("CanOutsourcer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPartiDiRicambio")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPredittiva")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPreventiva")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPulizie")
                        .HasColumnType("bit");

                    b.Property<bool>("CanStrumenti")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUtenti")
                        .HasColumnType("bit");

                    b.Property<bool>("CanValidate")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityRoleId");

                    b.ToTable("UserRolesRules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Asset", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetErrorCode", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetsErrorCodes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManutationItemsApp.Domain.Entities.ErrorCode", "ErrorCode")
                        .WithMany("AssetsErrorCodes")
                        .HasForeignKey("ErrorCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetFile", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Asset", "Asset")
                        .WithMany("Files")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.AssetItem", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetsItems")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManutationItemsApp.Domain.Entities.Item", "Item")
                        .WithMany("AssetsItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Consumable", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ConsumableTemp", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("Consumables")
                        .HasForeignKey("ManutationStageId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.File", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Consumable", null)
                        .WithMany("ManutationInstruction")
                        .HasForeignKey("ConsumableId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.Consumable", null)
                        .WithMany("SafetyInstruction")
                        .HasForeignKey("ConsumableId1");

                    b.HasOne("ManutationItemsApp.Domain.Entities.Tool", null)
                        .WithMany("ManutationManual")
                        .HasForeignKey("ToolId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Item", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.Asset", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Items")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ItemFile", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Item", "Item")
                        .WithMany("Files")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ItemTemp", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("Items")
                        .HasForeignKey("ManutationStageId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Manutation", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Asset", "Asset")
                        .WithMany("Manutations")
                        .HasForeignKey("AssetId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", "Creator")
                        .WithMany("ManutationsCreated")
                        .HasForeignKey("CreatorId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.ErrorCode", "ErrorCode")
                        .WithMany("Manutations")
                        .HasForeignKey("ErrorCodeId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationTypess", "ManutationType")
                        .WithMany("Manutations")
                        .HasForeignKey("ManutationTypeId");

                    b.HasOne("ManutationItemsApp.Domain.Entities.TypeOfFault", "TypeOfFault")
                        .WithMany("Manutations")
                        .HasForeignKey("TypeOfFaultId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ManutationStage", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.Manutation", "Manutation")
                        .WithMany("ManutationStages")
                        .HasForeignKey("ManutationId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.MeasuringToolTemp", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("MeasuringTools")
                        .HasForeignKey("ManutationStageId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.Status", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("Statuses")
                        .HasForeignKey("ManutationStageId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.ToolTemp", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("Tools")
                        .HasForeignKey("ManutationStageId");
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.UserManutationStage", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ManutationStages")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManutationItemsApp.Domain.Entities.ManutationStage", "ManutationStage")
                        .WithMany("UserManutationStages")
                        .HasForeignKey("ManutationStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManutationItemsApp.Domain.Entities.UserRolesRules", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManutationItemsApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
